#include<iostream>
#include<cstring>
#include<algorithm>
#include<climits>
#include<vector>
using namespace std;

int n;
int f[10005][4];
int a[10005];//a[i]表示标号为i的机位左右都没人时对应的分数
int b[10005];//b[i]表示标号为i的机位左边或者右边有人时对应的分数
int c[10005];//c[i]表示标号为i的机位左右两边都没有人时的分数（机位两端不会有c对应的分值）
//f[i][0]表示当一个人准备坐在标号为i的机位的时候，这个机位的左和右都没有人。
//f[i][1]表示当一个人准备坐在标号为i的机位的时候，这个机位的左边有人，右边没有人，即左边的机位比这个人先坐下了。
//f[i][2]表示当一个人准备坐在标号为i的机位的时候，这个机位的左边没有人，右边有人，即右边的机位比这个人先坐下了。
//f[i][3]表示当一个人准备坐在标号为i的机位的时候，这个机位的左右两边都有人，即左边和右边的人都比这个人先坐下了。

int main()
{
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	for (int i = 0; i < n; i++)
		cin >> b[i];
	for (int i = 0; i < n; i++)
		cin >> c[i];
	f[0][0] = a[0];
	f[0][1] = 1 << 31;//不可能
	f[0][2] = b[0];
	f[0][3] = 1 << 31;//不可能
	for (int i = 1; i < n; i++) {
		f[i][0] = max(f[i - 1][2], f[i - 1][3]) + a[i];
		f[i][1] = max(f[i - 1][0], f[i - 1][1]) + b[i];
		f[i][2] = max(f[i - 1][2], f[i - 1][3]) + b[i];
		f[i][3] = max(f[i - 1][1], f[i - 1][0]) + c[i];
		//入座的先后顺序是关键的
	}
	cout << max(f[n - 1][0], f[n - 1][1]);//右边不可能有人了，不可以取f[n-1][2]或f[n-1][3]
	return 0;
}
